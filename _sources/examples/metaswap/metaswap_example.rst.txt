
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\metaswap\metaswap_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_metaswap_metaswap_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_metaswap_metaswap_example.py:


Coupled MetaSWAP - Modflow6 model
=================================

This example illustrates how to setup a simple MetaSWAP model coupled to a
Modflow 6 model model using the ``imod`` package and associated packages.

Overview of steps made:

    * Create Modflow 6 model
    * Create MetaSWAP model
    * Write coupled models

.. GENERATED FROM PYTHON SOURCE LINES 17-18

We'll start with the following imports:

.. GENERATED FROM PYTHON SOURCE LINES 18-27

.. code-block:: Python



    import numpy as np
    import pandas as pd
    import xarray as xr

    import imod
    from imod import couplers, mf6, msw








.. GENERATED FROM PYTHON SOURCE LINES 29-33

Modflow 6 model
---------------

Next, we initiate the Modflow 6 groundwater model:

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: Python


    gwf_model = mf6.GroundwaterFlowModel()








.. GENERATED FROM PYTHON SOURCE LINES 37-42

Create grid
```````````

We'll then define the Modflow 6 grid.
It consists of 3 layers of 9 by 9 cells rasters.

.. GENERATED FROM PYTHON SOURCE LINES 42-66

.. code-block:: Python


    shape = nlay, nrow, ncol = 3, 9, 9

    dx = 10.0
    dy = -10.0
    dz = np.array([1.0, 2.0, 10.0])
    xmin = 0.0
    xmax = dx * ncol
    ymin = 0.0
    ymax = abs(dy) * nrow
    dims = ("layer", "y", "x")

    layer = np.arange(1, nlay + 1)
    y = np.arange(ymax, ymin, dy) + 0.5 * dy
    x = np.arange(xmin, xmax, dx) + 0.5 * dx
    coords = {"layer": layer, "y": y, "x": x}

    idomain = xr.DataArray(np.ones(shape, dtype=int), coords=coords, dims=dims)

    top = 0.0
    bottom = top - xr.DataArray(
        np.cumsum(layer * dz), coords={"layer": layer}, dims="layer"
    )








.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: Python


    gwf_model["dis"] = mf6.StructuredDiscretization(idomain=idomain, top=top, bottom=bottom)








.. GENERATED FROM PYTHON SOURCE LINES 71-79

Hydrogeology
````````````

Hydraulic conductivity
''''''''''''''''''''''

Assign the node property flow package, which specifies the hydraulic
conductivities. The middle layer is an aquitard.

.. GENERATED FROM PYTHON SOURCE LINES 79-89

.. code-block:: Python


    k = xr.DataArray([10.0, 0.1, 10.0], {"layer": layer}, ("layer",))
    k33 = xr.DataArray([1.0, 0.01, 1.0], {"layer": layer}, ("layer",))
    gwf_model["npf"] = mf6.NodePropertyFlow(
        icelltype=0,
        k=k,
        k33=k33,
        save_flows=True,
    )








.. GENERATED FROM PYTHON SOURCE LINES 90-96

Storage
'''''''

Cells are set to non-convertible (convertible = 0). This is a requirement for
MetaSWAP, because, once coupled, MetaSWAP is responsible for computing the
storage coefficient instead of Modflow.

.. GENERATED FROM PYTHON SOURCE LINES 96-101

.. code-block:: Python


    gwf_model["sto"] = mf6.SpecificStorage(
        specific_storage=1e-3, specific_yield=0.0, transient=True, convertible=0
    )








.. GENERATED FROM PYTHON SOURCE LINES 102-104

Initial conditions
``````````````````

.. GENERATED FROM PYTHON SOURCE LINES 104-107

.. code-block:: Python


    gwf_model["ic"] = mf6.InitialConditions(start=0.5)








.. GENERATED FROM PYTHON SOURCE LINES 108-110

Output Control
``````````````

.. GENERATED FROM PYTHON SOURCE LINES 110-113

.. code-block:: Python


    gwf_model["oc"] = mf6.OutputControl(save_head="last", save_budget="last")








.. GENERATED FROM PYTHON SOURCE LINES 114-121

Boundary conditions
```````````````````

Constant head
'''''''''''''
We'll create constant head cells at the most left and right columns of the grid,
representing two ditches.

.. GENERATED FROM PYTHON SOURCE LINES 121-133

.. code-block:: Python


    head = xr.full_like(idomain, np.nan, dtype=float)
    head[0, :, 0] = -1.0
    head[0, :, -1] = -1.0

    gwf_model["chd"] = mf6.ConstantHead(
        head, print_input=True, print_flows=True, save_flows=True
    )

    head.isel(layer=0).plot()





.. image-sg:: /examples/metaswap/images/sphx_glr_metaswap_example_001.png
   :alt: layer = 1
   :srcset: /examples/metaswap/images/sphx_glr_metaswap_example_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.QuadMesh object at 0x0000014B2C380FA0>



.. GENERATED FROM PYTHON SOURCE LINES 134-147

Dummy boundary conditions
'''''''''''''''''''''''''

The iMOD Coupler requires a dummy recharge package, and well package if
MetaSWAP's sprinkling is enabled. This to let Modflow 6 allocate the
appropriate matrices needed in the exchange of states during model
computation.

Recharge
........

We'll start off with the recharge package, which has no recharge cells
at the location of our ditches.

.. GENERATED FROM PYTHON SOURCE LINES 148-157

.. code-block:: Python


    recharge = xr.zeros_like(idomain.sel(layer=1), dtype=float)
    recharge[:, 0] = np.nan
    recharge[:, -1] = np.nan

    gwf_model["rch_msw"] = mf6.Recharge(recharge)

    recharge.plot()




.. image-sg:: /examples/metaswap/images/sphx_glr_metaswap_example_002.png
   :alt: layer = 1
   :srcset: /examples/metaswap/images/sphx_glr_metaswap_example_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.QuadMesh object at 0x0000014B2B1EF4F0>



.. GENERATED FROM PYTHON SOURCE LINES 158-165

Wells
.....

We'll create a dummy well package as well. imod.mf6.WellDisStructured needs
its input data provided as long tables instead of grids to so therefore we'll
create 1d arrays by calling ``np.tile`` on the column indices,
and ``np.repeat`` on the row indices.

.. GENERATED FROM PYTHON SOURCE LINES 165-177

.. code-block:: Python


    wel_layer = 3

    ix = np.tile(np.arange(ncol) + 1, nrow)
    iy = np.repeat(np.arange(nrow) + 1, ncol)
    rate = np.zeros(ix.shape)
    layer = np.full_like(ix, wel_layer)

    gwf_model["wells_msw"] = mf6.WellDisStructured(
        layer=layer, row=iy, column=ix, rate=rate
    )








.. GENERATED FROM PYTHON SOURCE LINES 178-179

Initiate a Modflow 6 simulatation and attach the groundwater model to it.

.. GENERATED FROM PYTHON SOURCE LINES 179-189

.. code-block:: Python


    simulation = mf6.Modflow6Simulation("test")
    simulation["GWF_1"] = gwf_model

    # Define solver settings, we'll use a preset that is sufficient for this example.

    simulation["solver"] = mf6.SolutionPresetSimple(
        modelnames=["GWF_1"], print_option="summary", csv_output=False, no_ptc=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 190-191

Create time discretization, we'll model 2 days.

.. GENERATED FROM PYTHON SOURCE LINES 191-199

.. code-block:: Python


    freq = "D"
    times = pd.date_range(start="1/1/1971", end="1/3/1971", freq=freq)

    simulation.create_time_discretization(additional_times=times)

    times





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DatetimeIndex(['1971-01-01', '1971-01-02', '1971-01-03'], dtype='datetime64[ns]', freq='D')



.. GENERATED FROM PYTHON SOURCE LINES 200-208

MetaSWAP model
--------------

The next step is initating a ``MetaSwapModel``. Critical is setting the right
path to MetaSWAP's soil physical database, which contains the lookup table
with the soil physical relationships. Without access to this database MetaSWAP
cannot function. `The full database can be downloaded here.
<https://download.deltares.nl/metaswap>`_

.. GENERATED FROM PYTHON SOURCE LINES 209-221

.. code-block:: Python


    msw_model = msw.MetaSwapModel(unsaturated_database="./path/to/unsaturated/database")

    # Create grid
    # ```````````
    #
    # We'll start off specifying the grids required for MetaSWAP. The x,y values
    # of this grid should be identical as the Modflow6 model, but it should
    # not have a layer dimension.

    msw_grid = idomain.sel(layer=1, drop=True).astype(float)








.. GENERATED FROM PYTHON SOURCE LINES 222-225

We do not want MetaSWAP cells in the cells where the ditches are located in
Modflow 6. We can specify where MetaSWAP cells are active with the "active"
grid, which is a grid of booleans (i.e. True/False).

.. GENERATED FROM PYTHON SOURCE LINES 225-232

.. code-block:: Python


    active = msw_grid.astype(bool)
    active[..., 0] = False
    active[..., -1] = False

    active






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body[data-theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-index-preview {
      grid-column: 2 / 5;
      color: var(--xr-font-color2);
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data,
    .xr-index-data-in:checked ~ .xr-index-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-index-name div,
    .xr-index-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2,
    .xr-no-icon {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray (y: 9, x: 9)&gt;
    array([[False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False]])
    Coordinates:
      * y        (y) float64 85.0 75.0 65.0 55.0 45.0 35.0 25.0 15.0 5.0
      * x        (x) float64 5.0 15.0 25.0 35.0 45.0 55.0 65.0 75.0 85.0</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>y</span>: 9</li><li><span class='xr-has-index'>x</span>: 9</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-63133ebc-62f0-4ff7-beca-9648d98eb3db' class='xr-array-in' type='checkbox' checked><label for='section-63133ebc-62f0-4ff7-beca-9648d98eb3db' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>False True True True True True True ... True True True True True False</span></div><div class='xr-array-data'><pre>array([[False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False],
           [False,  True,  True,  True,  True,  True,  True,  True, False]])</pre></div></div></li><li class='xr-section-item'><input id='section-475defce-69d3-4091-ba56-faf0c7eb52f0' class='xr-section-summary-in' type='checkbox'  checked><label for='section-475defce-69d3-4091-ba56-faf0c7eb52f0' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>y</span></div><div class='xr-var-dims'>(y)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>85.0 75.0 65.0 ... 25.0 15.0 5.0</div><input id='attrs-ab69d7f3-297f-4dc8-b169-547fdda8316a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ab69d7f3-297f-4dc8-b169-547fdda8316a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-e4b39803-0387-4173-9a0f-e2f9757be3a1' class='xr-var-data-in' type='checkbox'><label for='data-e4b39803-0387-4173-9a0f-e2f9757be3a1' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([85., 75., 65., 55., 45., 35., 25., 15.,  5.])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>x</span></div><div class='xr-var-dims'>(x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>5.0 15.0 25.0 ... 65.0 75.0 85.0</div><input id='attrs-8a0de0f0-da7b-41b8-90d1-084c05467d54' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-8a0de0f0-da7b-41b8-90d1-084c05467d54' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-74b48dfc-c0c9-43a5-875d-2b93e054ceee' class='xr-var-data-in' type='checkbox'><label for='data-74b48dfc-c0c9-43a5-875d-2b93e054ceee' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 5., 15., 25., 35., 45., 55., 65., 75., 85.])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-e4f9d161-ee8f-44c8-8155-914d6fb3a021' class='xr-section-summary-in' type='checkbox'  ><label for='section-e4f9d161-ee8f-44c8-8155-914d6fb3a021' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>y</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-e8d61ac2-41a2-45c0-844f-e7fa3814c4ee' class='xr-index-data-in' type='checkbox'/><label for='index-e8d61ac2-41a2-45c0-844f-e7fa3814c4ee' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([85.0, 75.0, 65.0, 55.0, 45.0, 35.0, 25.0, 15.0, 5.0], dtype=&#x27;float64&#x27;, name=&#x27;y&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>x</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-efd929ba-b6f0-4175-bed4-916d5356f161' class='xr-index-data-in' type='checkbox'/><label for='index-efd929ba-b6f0-4175-bed4-916d5356f161' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([5.0, 15.0, 25.0, 35.0, 45.0, 55.0, 65.0, 75.0, 85.0], dtype=&#x27;float64&#x27;, name=&#x27;x&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-46d56902-cfbc-49fe-8bfc-0f32773dad3c' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-46d56902-cfbc-49fe-8bfc-0f32773dad3c' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 233-241

Another crucial grid is the "area" grid. The area grid denotes the area in
each cell, for each "subunit". A subunit represent a separate landuse in the
grid. We'll create a grid with two separate land uses.

Each grid which specifies parameters related to landuse (e.g. landuse,
rootzone_depth, ponding depth) requires a subunit dimension. In contrast,
grids specifying parameters not induced by landuse (e.g. soil type, elevation,
precipitation) cannot contain a subunit dimension.

.. GENERATED FROM PYTHON SOURCE LINES 241-267

.. code-block:: Python


    subunit = [0, 1]

    total_cell_area = abs(dx * dy)
    equal_area_per_subunit = total_cell_area / len(subunit)

    total_cell_area

    # Create a full grid equal to the msw_grid. And expand_dims() to broadcast this
    # grid along a new dimension, named "subunit"
    area = (
        xr.full_like(msw_grid, equal_area_per_subunit, dtype=float)
        .expand_dims(subunit=subunit)
        .copy()  # expand_dims creates a view, so copy it to allow setting values.
    )

    # To the left we only have subunit 0
    area[0, :, :3] = total_cell_area
    area[1, :, :3] = np.nan

    # To the right we only have subunit 1
    area[0, :, -3:] = np.nan
    area[1, :, -3:] = total_cell_area

    area






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body[data-theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-index-preview {
      grid-column: 2 / 5;
      color: var(--xr-font-color2);
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data,
    .xr-index-data-in:checked ~ .xr-index-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-index-name div,
    .xr-index-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2,
    .xr-no-icon {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray (subunit: 2, y: 9, x: 9)&gt;
    array([[[100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan]],

           [[ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.]]])
    Coordinates:
      * subunit  (subunit) int64 0 1
      * y        (y) float64 85.0 75.0 65.0 55.0 45.0 35.0 25.0 15.0 5.0
      * x        (x) float64 5.0 15.0 25.0 35.0 45.0 55.0 65.0 75.0 85.0</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>subunit</span>: 2</li><li><span class='xr-has-index'>y</span>: 9</li><li><span class='xr-has-index'>x</span>: 9</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-61e56395-058c-4412-a14b-d00614968f1a' class='xr-array-in' type='checkbox' checked><label for='section-61e56395-058c-4412-a14b-d00614968f1a' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>100.0 100.0 100.0 50.0 50.0 50.0 ... 50.0 50.0 50.0 100.0 100.0 100.0</span></div><div class='xr-array-data'><pre>array([[[100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan],
            [100., 100., 100.,  50.,  50.,  50.,  nan,  nan,  nan]],

           [[ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.],
            [ nan,  nan,  nan,  50.,  50.,  50., 100., 100., 100.]]])</pre></div></div></li><li class='xr-section-item'><input id='section-819b6327-fa84-4a27-b191-cd30d41caded' class='xr-section-summary-in' type='checkbox'  checked><label for='section-819b6327-fa84-4a27-b191-cd30d41caded' class='xr-section-summary' >Coordinates: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>subunit</span></div><div class='xr-var-dims'>(subunit)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0 1</div><input id='attrs-aaca438b-9d91-4e43-ad50-fd0f7f53305f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-aaca438b-9d91-4e43-ad50-fd0f7f53305f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ec133ec5-7538-4a1b-ab0c-9d41bf163720' class='xr-var-data-in' type='checkbox'><label for='data-ec133ec5-7538-4a1b-ab0c-9d41bf163720' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([0, 1], dtype=int64)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>y</span></div><div class='xr-var-dims'>(y)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>85.0 75.0 65.0 ... 25.0 15.0 5.0</div><input id='attrs-5cc17fd5-b69a-4492-8c76-0bd9bc2afa76' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-5cc17fd5-b69a-4492-8c76-0bd9bc2afa76' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-e14e2b11-70d7-463b-bb37-6d705d2c9a8d' class='xr-var-data-in' type='checkbox'><label for='data-e14e2b11-70d7-463b-bb37-6d705d2c9a8d' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([85., 75., 65., 55., 45., 35., 25., 15.,  5.])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>x</span></div><div class='xr-var-dims'>(x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>5.0 15.0 25.0 ... 65.0 75.0 85.0</div><input id='attrs-37702396-851f-4f91-9814-75d4f5bb5038' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-37702396-851f-4f91-9814-75d4f5bb5038' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-327a0132-f3ad-43d8-8742-d0e0198341c2' class='xr-var-data-in' type='checkbox'><label for='data-327a0132-f3ad-43d8-8742-d0e0198341c2' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 5., 15., 25., 35., 45., 55., 65., 75., 85.])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-c26a7e6d-4c5f-41df-b4fb-541827667d80' class='xr-section-summary-in' type='checkbox'  ><label for='section-c26a7e6d-4c5f-41df-b4fb-541827667d80' class='xr-section-summary' >Indexes: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>y</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-8aeaa3f8-dee2-4c74-8031-86d1aed08f8d' class='xr-index-data-in' type='checkbox'/><label for='index-8aeaa3f8-dee2-4c74-8031-86d1aed08f8d' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([85.0, 75.0, 65.0, 55.0, 45.0, 35.0, 25.0, 15.0, 5.0], dtype=&#x27;float64&#x27;, name=&#x27;y&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>x</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-62e2ffb8-55ec-434d-a72f-f39b7431c8f8' class='xr-index-data-in' type='checkbox'/><label for='index-62e2ffb8-55ec-434d-a72f-f39b7431c8f8' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([5.0, 15.0, 25.0, 35.0, 45.0, 55.0, 65.0, 75.0, 85.0], dtype=&#x27;float64&#x27;, name=&#x27;x&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>subunit</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-f213f032-ccf8-4f2e-80f7-eadf1af70c33' class='xr-index-data-in' type='checkbox'/><label for='index-f213f032-ccf8-4f2e-80f7-eadf1af70c33' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Int64Index([0, 1], dtype=&#x27;int64&#x27;, name=&#x27;subunit&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-93e6b943-6fe8-427b-9f80-60b2261c7011' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-93e6b943-6fe8-427b-9f80-60b2261c7011' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 268-272

Landuse
```````

Define a grid with landuse classes.

.. GENERATED FROM PYTHON SOURCE LINES 273-279

.. code-block:: Python


    landuse = xr.full_like(area, 1, dtype=np.int16)
    landuse[1, :, :] = 2

    landuse






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body[data-theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-index-preview {
      grid-column: 2 / 5;
      color: var(--xr-font-color2);
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data,
    .xr-index-data-in:checked ~ .xr-index-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-index-name div,
    .xr-index-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2,
    .xr-no-icon {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray (subunit: 2, y: 9, x: 9)&gt;
    array([[[1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1]],

           [[2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2]]], dtype=int16)
    Coordinates:
      * subunit  (subunit) int64 0 1
      * y        (y) float64 85.0 75.0 65.0 55.0 45.0 35.0 25.0 15.0 5.0
      * x        (x) float64 5.0 15.0 25.0 35.0 45.0 55.0 65.0 75.0 85.0</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>subunit</span>: 2</li><li><span class='xr-has-index'>y</span>: 9</li><li><span class='xr-has-index'>x</span>: 9</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-d9aacfdf-dc67-4bdb-9023-c02c3050b9fe' class='xr-array-in' type='checkbox' checked><label for='section-d9aacfdf-dc67-4bdb-9023-c02c3050b9fe' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ... 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2</span></div><div class='xr-array-data'><pre>array([[[1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1]],

           [[2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2]]], dtype=int16)</pre></div></div></li><li class='xr-section-item'><input id='section-56a768ab-e5a2-44b8-b11b-4d921773aa79' class='xr-section-summary-in' type='checkbox'  checked><label for='section-56a768ab-e5a2-44b8-b11b-4d921773aa79' class='xr-section-summary' >Coordinates: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>subunit</span></div><div class='xr-var-dims'>(subunit)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0 1</div><input id='attrs-fa86130c-a089-4116-b3c8-bcae068972f4' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-fa86130c-a089-4116-b3c8-bcae068972f4' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-fbf74912-5084-411c-8080-8ab5eec6235f' class='xr-var-data-in' type='checkbox'><label for='data-fbf74912-5084-411c-8080-8ab5eec6235f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([0, 1], dtype=int64)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>y</span></div><div class='xr-var-dims'>(y)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>85.0 75.0 65.0 ... 25.0 15.0 5.0</div><input id='attrs-cc45814f-807f-4272-b56a-65793038232e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-cc45814f-807f-4272-b56a-65793038232e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-6cfae331-327a-409a-b1d4-30529559489d' class='xr-var-data-in' type='checkbox'><label for='data-6cfae331-327a-409a-b1d4-30529559489d' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([85., 75., 65., 55., 45., 35., 25., 15.,  5.])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>x</span></div><div class='xr-var-dims'>(x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>5.0 15.0 25.0 ... 65.0 75.0 85.0</div><input id='attrs-6515786c-8fbc-4a8f-9a63-c7ca73b07bd5' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-6515786c-8fbc-4a8f-9a63-c7ca73b07bd5' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7200f500-cefc-472d-a396-f8b0820a027e' class='xr-var-data-in' type='checkbox'><label for='data-7200f500-cefc-472d-a396-f8b0820a027e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 5., 15., 25., 35., 45., 55., 65., 75., 85.])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-75474dc2-85a0-4610-8c35-98e17a4d52e9' class='xr-section-summary-in' type='checkbox'  ><label for='section-75474dc2-85a0-4610-8c35-98e17a4d52e9' class='xr-section-summary' >Indexes: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>y</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-8db3619c-a0f7-4aba-ad24-f090098b6a37' class='xr-index-data-in' type='checkbox'/><label for='index-8db3619c-a0f7-4aba-ad24-f090098b6a37' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([85.0, 75.0, 65.0, 55.0, 45.0, 35.0, 25.0, 15.0, 5.0], dtype=&#x27;float64&#x27;, name=&#x27;y&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>x</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-97051891-5521-4e16-aca8-535097d0ef8c' class='xr-index-data-in' type='checkbox'/><label for='index-97051891-5521-4e16-aca8-535097d0ef8c' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([5.0, 15.0, 25.0, 35.0, 45.0, 55.0, 65.0, 75.0, 85.0], dtype=&#x27;float64&#x27;, name=&#x27;x&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>subunit</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-529e02c5-5849-485a-861b-a597baac15a1' class='xr-index-data-in' type='checkbox'/><label for='index-529e02c5-5849-485a-861b-a597baac15a1' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Int64Index([0, 1], dtype=&#x27;int64&#x27;, name=&#x27;subunit&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-94b9bd38-844b-40e0-8191-dcda34ceba64' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-94b9bd38-844b-40e0-8191-dcda34ceba64' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 280-289

Soil types
``````````

Define soil type classes. These will be looked up in MetaSWAP's giant lookup
table for the national Staring series describing Dutch soils. `The full
database can be downloaded here.
<https://download.deltares.nl/metaswap>` In
previous examples we set values in our DataArray using numpy indexing. But we
can also use xarray's ``where()`` method to set values.

.. GENERATED FROM PYTHON SOURCE LINES 290-297

.. code-block:: Python


    slt = xr.full_like(msw_grid, 1, dtype=np.int16)
    # Set all cells on the right half to 2.
    slt = slt.where((slt.x < (xmax / 2)), 2)

    slt






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body[data-theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-index-preview {
      grid-column: 2 / 5;
      color: var(--xr-font-color2);
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data,
    .xr-index-data-in:checked ~ .xr-index-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-index-name div,
    .xr-index-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2,
    .xr-no-icon {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray (y: 9, x: 9)&gt;
    array([[1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2]], dtype=int16)
    Coordinates:
      * y        (y) float64 85.0 75.0 65.0 55.0 45.0 35.0 25.0 15.0 5.0
      * x        (x) float64 5.0 15.0 25.0 35.0 45.0 55.0 65.0 75.0 85.0</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>y</span>: 9</li><li><span class='xr-has-index'>x</span>: 9</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-2ea0f536-48d3-48d0-9977-02993c7ce775' class='xr-array-in' type='checkbox' checked><label for='section-2ea0f536-48d3-48d0-9977-02993c7ce775' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>1 1 1 1 2 2 2 2 2 1 1 1 1 2 2 2 2 ... 1 1 2 2 2 2 2 1 1 1 1 2 2 2 2 2</span></div><div class='xr-array-data'><pre>array([[1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2],
           [1, 1, 1, 1, 2, 2, 2, 2, 2]], dtype=int16)</pre></div></div></li><li class='xr-section-item'><input id='section-7bc9c3ab-f37f-43e7-84ac-a1225c2ecd17' class='xr-section-summary-in' type='checkbox'  checked><label for='section-7bc9c3ab-f37f-43e7-84ac-a1225c2ecd17' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>y</span></div><div class='xr-var-dims'>(y)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>85.0 75.0 65.0 ... 25.0 15.0 5.0</div><input id='attrs-d7bfae98-d9b1-4cbe-ab33-a450e2ad883a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-d7bfae98-d9b1-4cbe-ab33-a450e2ad883a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f6983380-4100-48b4-8049-68cee68087e3' class='xr-var-data-in' type='checkbox'><label for='data-f6983380-4100-48b4-8049-68cee68087e3' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([85., 75., 65., 55., 45., 35., 25., 15.,  5.])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>x</span></div><div class='xr-var-dims'>(x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>5.0 15.0 25.0 ... 65.0 75.0 85.0</div><input id='attrs-cb29f4ba-950f-424f-8251-ad34b1edaee0' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-cb29f4ba-950f-424f-8251-ad34b1edaee0' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-79fb336c-cb19-445a-9356-11b3566878ed' class='xr-var-data-in' type='checkbox'><label for='data-79fb336c-cb19-445a-9356-11b3566878ed' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 5., 15., 25., 35., 45., 55., 65., 75., 85.])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-7b2a6366-500c-4593-8c72-ad4c752481e7' class='xr-section-summary-in' type='checkbox'  ><label for='section-7b2a6366-500c-4593-8c72-ad4c752481e7' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>y</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-8e8312ed-c3b9-4b86-8fd0-7f9d7d2581b6' class='xr-index-data-in' type='checkbox'/><label for='index-8e8312ed-c3b9-4b86-8fd0-7f9d7d2581b6' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([85.0, 75.0, 65.0, 55.0, 45.0, 35.0, 25.0, 15.0, 5.0], dtype=&#x27;float64&#x27;, name=&#x27;y&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>x</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-5ecb75b0-a64c-4102-b3b1-97b6a0be466d' class='xr-index-data-in' type='checkbox'/><label for='index-5ecb75b0-a64c-4102-b3b1-97b6a0be466d' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([5.0, 15.0, 25.0, 35.0, 45.0, 55.0, 65.0, 75.0, 85.0], dtype=&#x27;float64&#x27;, name=&#x27;x&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-0ff1b155-65d6-4a7e-9ab3-b1ff51d26f28' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-0ff1b155-65d6-4a7e-9ab3-b1ff51d26f28' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 298-302

Finishing the grid
``````````````````
To finish specifying the landuse grid data, we'll require a rootzone depth
for each subunit, and a grid with surface elevations

.. GENERATED FROM PYTHON SOURCE LINES 302-314

.. code-block:: Python


    rootzone_depth = xr.full_like(area, 0.5)
    surface_elevation = xr.full_like(msw_grid, 2.0)

    msw_model["grid"] = msw.GridData(
        area=area,
        landuse=landuse,
        rootzone_depth=rootzone_depth,
        surface_elevation=surface_elevation,
        soil_physical_unit=slt,
        active=active,
    )







.. GENERATED FROM PYTHON SOURCE LINES 315-321

Initial Condition
`````````````````

There are four options to specify initial conditions,
see this for page for an explanation ---link-here---.
In this case we opt for an inital pF value of 2.2.

.. GENERATED FROM PYTHON SOURCE LINES 321-324

.. code-block:: Python


    msw_model["ic"] = msw.InitialConditionsRootzonePressureHead(initial_pF=2.2)








.. GENERATED FROM PYTHON SOURCE LINES 325-330

Meteorology
```````````

Meteorological information should be provided as grids with a ``time``
dimension.

.. GENERATED FROM PYTHON SOURCE LINES 330-338

.. code-block:: Python


    precipitation = msw_grid.expand_dims(time=times[:-1])
    evapotranspiration = precipitation * 1.5

    msw_model["meteo_grid"] = msw.MeteoGrid(precipitation, evapotranspiration)
    msw_model["mapping_prec"] = msw.PrecipitationMapping(precipitation)
    msw_model["mapping_evt"] = msw.EvapotranspirationMapping(evapotranspiration)








.. GENERATED FROM PYTHON SOURCE LINES 339-342

Ponding
```````


.. GENERATED FROM PYTHON SOURCE LINES 342-348

.. code-block:: Python

    msw_model["ponding"] = msw.Ponding(
        ponding_depth=xr.full_like(area, 0.0),
        runon_resistance=xr.full_like(area, 1.0),
        runoff_resistance=xr.full_like(area, 1.0),
    )








.. GENERATED FROM PYTHON SOURCE LINES 349-356

Scaling Factors
```````````````

Scaling factors can be defined to adapt some parameters in the soil physical
database. With this you can investigate the sensitivity of parameters in soil
physical database. Furthermore, with this package you can specify the depth of
the perched water table.

.. GENERATED FROM PYTHON SOURCE LINES 356-364

.. code-block:: Python


    msw_model["scaling"] = msw.ScalingFactors(
        scale_soil_moisture=xr.full_like(area, 1.0),
        scale_hydraulic_conductivity=xr.full_like(area, 1.0),
        scale_pressure_head=xr.full_like(area, 1.0),
        depth_perched_water_table=xr.full_like(msw_grid, 1.0),
    )








.. GENERATED FROM PYTHON SOURCE LINES 365-370

Infiltration Factors
````````````````````

Set the infiltration parameters. We set the resistances to -9999.0, which
makes MetaSWAP ignore them.

.. GENERATED FROM PYTHON SOURCE LINES 370-379

.. code-block:: Python


    msw_model["infiltration"] = msw.Infiltration(
        infiltration_capacity=xr.full_like(area, 1.0),
        downward_resistance=xr.full_like(msw_grid, -9999.0),
        upward_resistance=xr.full_like(msw_grid, -9999.0),
        bottom_resistance=xr.full_like(msw_grid, -9999.0),
        extra_storage_coefficient=xr.full_like(msw_grid, 0.1),
    )








.. GENERATED FROM PYTHON SOURCE LINES 380-388

Landuse options
```````````````

The landuse option class constructs a lookup table which is used to map
landuse indices to a set of parameters. In this example, 3 stands for
potatoes. This means that for every cell in the ``landuse`` grid with a 3, the
parameters for a crop with ``vegetation_index == 3`` are associate, which in this
case are potatoes.

.. GENERATED FROM PYTHON SOURCE LINES 388-400

.. code-block:: Python


    vegetation_index = [1, 2, 3]
    names = ["grassland", "maize", "potatoes"]

    landuse_index = [1, 2, 3]
    coords = {"landuse_index": landuse_index}

    landuse_names = xr.DataArray(data=names, coords=coords, dims=("landuse_index",))
    vegetation_index_da = xr.DataArray(
        data=vegetation_index, coords=coords, dims=("landuse_index",)
    )








.. GENERATED FROM PYTHON SOURCE LINES 401-403

Because there are a lot of parameters to define, we'll create a DataArray of
ones (``lu``) to more easily broadcast all the different parameters.

.. GENERATED FROM PYTHON SOURCE LINES 404-431

.. code-block:: Python


    lu = xr.ones_like(vegetation_index_da, dtype=float)

    msw_model["landuse_options"] = msw.LanduseOptions(
        landuse_name=landuse_names,
        vegetation_index=vegetation_index_da,
        jarvis_o2_stress=xr.ones_like(lu),
        jarvis_drought_stress=xr.ones_like(lu),
        feddes_p1=xr.full_like(lu, 99.0),
        feddes_p2=xr.full_like(lu, 99.0),
        feddes_p3h=lu * [-2.0, -4.0, -3.0],
        feddes_p3l=lu * [-8.0, -5.0, -5.0],
        feddes_p4=lu * [-80.0, -100.0, -100.0],
        feddes_t3h=xr.full_like(lu, 5.0),
        feddes_t3l=xr.full_like(lu, 1.0),
        threshold_sprinkling=lu * [-8.0, -5.0, -5.0],
        fraction_evaporated_sprinkling=xr.full_like(lu, 0.05),
        gift=xr.full_like(lu, 20.0),
        gift_duration=xr.full_like(lu, 0.25),
        rotational_period=lu * [10, 7, 7],
        start_sprinkling_season=lu * [120, 180, 150],
        end_sprinkling_season=lu * [230, 230, 240],
        interception_option=xr.ones_like(lu, dtype=int),
        interception_capacity_per_LAI=xr.zeros_like(lu),
        interception_intercept=xr.ones_like(lu),
    )








.. GENERATED FROM PYTHON SOURCE LINES 432-440

Crop Growth
```````````

Crop growth tables are specified as a two-dimensional array, with the day of
year as one dimension, and the vegetation index on the other. In the vegetation
factors, we'll show how to bring some distinction between different crops.

We'll start off specifiying the coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 441-447

.. code-block:: Python


    day_of_year = np.arange(1, 367)
    vegetation_index = np.arange(1, 4)

    coords = {"day_of_year": day_of_year, "vegetation_index": vegetation_index}








.. GENERATED FROM PYTHON SOURCE LINES 448-450

We can use the coordinates to specify the soil cover of each plant.
We'll start with a grid of zeros

.. GENERATED FROM PYTHON SOURCE LINES 450-456

.. code-block:: Python

    soil_cover = xr.DataArray(
        data=np.zeros(day_of_year.shape + vegetation_index.shape),
        coords=coords,
        dims=("day_of_year", "vegetation_index"),
    )








.. GENERATED FROM PYTHON SOURCE LINES 457-460

The simplest soil cover specification is a step function. In this case soil
cover equals 1.0 for days 133 to 255 (mind Python's 0-based index here), and
for the rest of the days it equals zero.

.. GENERATED FROM PYTHON SOURCE LINES 460-465

.. code-block:: Python


    soil_cover[132:254, :] = 1.0

    soil_cover.sel(vegetation_index=1).plot()




.. image-sg:: /examples/metaswap/images/sphx_glr_metaswap_example_003.png
   :alt: vegetation_index = 1
   :srcset: /examples/metaswap/images/sphx_glr_metaswap_example_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.lines.Line2D object at 0x0000014B27B57310>]



.. GENERATED FROM PYTHON SOURCE LINES 466-467

We'll simply triple the soil cover to get a leaf area index

.. GENERATED FROM PYTHON SOURCE LINES 467-470

.. code-block:: Python


    leaf_area_index = soil_cover * 3








.. GENERATED FROM PYTHON SOURCE LINES 471-476

Vegetation factors are used to convert the Makkink reference
evapotranspiration to a potential evapotranspiration for a certain vegetation
type. We'll specify some simple crop schemes for the three crops as vegetation
factors. Mind that the vegetation factor array has two dimensions:
``day_of_year`` and ``vegetation_index``

.. GENERATED FROM PYTHON SOURCE LINES 476-502

.. code-block:: Python


    vegetation_names = ["grass", "maize", "potatoes"]

    vegetation_factor = xr.zeros_like(soil_cover)

    vegetation_factor[120:132, :] = [1.0, 0.5, 0.0]
    vegetation_factor[132:142, :] = [1.0, 0.7, 0.7]
    vegetation_factor[142:152, :] = [1.0, 0.8, 0.9]
    vegetation_factor[152:162, :] = [1.0, 0.9, 1.0]
    vegetation_factor[162:172, :] = [1.0, 1.0, 1.2]
    vegetation_factor[172:182, :] = [1.0, 1.2, 1.2]
    vegetation_factor[182:192, :] = [1.0, 1.3, 1.2]
    vegetation_factor[192:244, :] = [1.0, 1.2, 1.1]
    vegetation_factor[244:254, :] = [1.0, 1.2, 0.7]
    vegetation_factor[254:283, :] = [1.0, 1.2, 0.0]

    # Since grass is the reference crop, force all grass to 1.0
    vegetation_factor[:, 0] = 1.0


    # Assign vegetation names for the plot
    vegetation_factor.assign_coords(
        vegetation_names=("vegetation_index", vegetation_names)
    ).plot.line(x="day_of_year", hue="vegetation_names")





.. image-sg:: /examples/metaswap/images/sphx_glr_metaswap_example_004.png
   :alt: metaswap example
   :srcset: /examples/metaswap/images/sphx_glr_metaswap_example_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.lines.Line2D object at 0x0000014B28279E70>, <matplotlib.lines.Line2D object at 0x0000014B282793F0>, <matplotlib.lines.Line2D object at 0x0000014B2827BBB0>]



.. GENERATED FROM PYTHON SOURCE LINES 503-505

We'll leave the interception capacity at zero, and the other factors at
one, and assign these to the AnnualCropFactors package.

.. GENERATED FROM PYTHON SOURCE LINES 505-517

.. code-block:: Python


    msw_model["crop_factors"] = msw.AnnualCropFactors(
        soil_cover=soil_cover,
        leaf_area_index=leaf_area_index,
        interception_capacity=xr.zeros_like(soil_cover),
        vegetation_factor=vegetation_factor,
        interception_factor=xr.ones_like(soil_cover),
        bare_soil_factor=xr.ones_like(soil_cover),
        ponding_factor=xr.ones_like(soil_cover),
    )









.. GENERATED FROM PYTHON SOURCE LINES 518-520

Output Control
``````````````

.. GENERATED FROM PYTHON SOURCE LINES 520-525

.. code-block:: Python


    msw_model["oc_idf"] = msw.IdfMapping(area, -9999.0)
    msw_model["oc_var"] = msw.VariableOutputControl()
    msw_model["oc_time"] = msw.TimeOutputControl(time=times)








.. GENERATED FROM PYTHON SOURCE LINES 526-532

MetaSWAP Mappings
`````````````````

MetaSWAP requires its own mapping of SVAT to MODFLOW cells, for internal use.
We therefore provide the mf6.StructuredDiscretization and mf6.Well package to
mf6.CouplerMapping.

.. GENERATED FROM PYTHON SOURCE LINES 532-537

.. code-block:: Python


    msw_model["mod2svat"] = msw.CouplerMapping(
        modflow_dis=gwf_model["dis"], well=gwf_model["wells_msw"]
    )








.. GENERATED FROM PYTHON SOURCE LINES 538-539

The sprinkling package also requires the Modflow6 wells.

.. GENERATED FROM PYTHON SOURCE LINES 540-547

.. code-block:: Python


    msw_model["sprinkling"] = msw.Sprinkling(
        max_abstraction_groundwater=xr.full_like(msw_grid, 100.0),
        max_abstraction_surfacewater=xr.full_like(msw_grid, 100.0),
        well=gwf_model["wells_msw"],
    )








.. GENERATED FROM PYTHON SOURCE LINES 548-556

Coupler mapping
---------------

The MetaSWAP model and Modflow 6 simulation are provided to the MetaMod class,
which takes care of connecting (= "mapping") the two models. Make sure to
provide the keys of the dummy Modflow 6 boundary conditions where MetaSWAP is
coupled to, so iMOD Python knows where to look: It is technically possible to
define multiple WEL and RCH packages in Modflow 6.

.. GENERATED FROM PYTHON SOURCE LINES 556-564

.. code-block:: Python


    metamod = couplers.MetaMod(
        msw_model=msw_model,
        mf6_simulation=simulation,
        mf6_rch_pkgkey="rch_msw",
        mf6_wel_pkgkey="wells_msw",
    )








.. GENERATED FROM PYTHON SOURCE LINES 565-569

By providing a few necessary paths to the modflow and metaswap libraries
for iMOD Coupler, we can write the coupled models. You can download the
modflow and metaswap libraries as part of the `the last iMOD5 release
<https://oss.deltares.nl/web/imod/download-imod5>`_

.. GENERATED FROM PYTHON SOURCE LINES 569-577

.. code-block:: Python


    metamod_dir = imod.util.temporary_directory()
    mf6_dll = "./path/to/mf6.dll"
    metaswap_dll = "./path/to/metaswap.dll"
    metaswap_dll_dependency = "./path/to/metaswap/dll/dependency"

    metamod.write(metamod_dir, mf6_dll, metaswap_dll, metaswap_dll_dependency)








.. GENERATED FROM PYTHON SOURCE LINES 578-584

Running the models
------------------

In order to run the models, make sure you install ``imod_coupler``. `You can
find the installation instructions here.
<https://github.com/Deltares/imod_coupler>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.318 seconds)


.. _sphx_glr_download_examples_metaswap_metaswap_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: metaswap_example.ipynb <metaswap_example.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: metaswap_example.py <metaswap_example.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
