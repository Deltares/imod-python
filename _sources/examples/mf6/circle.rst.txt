
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\mf6\circle.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_mf6_circle.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_mf6_circle.py:


Circle
======

This example illustrates how to setup a very simple unstructured groundwater
model using the ``imod`` package and associated packages.

In overview, we'll set the following steps:

    * Create a triangular mesh for a disk geometry.
    * Create the xugrid UgridDataArrays containg the MODFLOW6 parameters.
    * Feed these arrays into the imod mf6 classes.
    * Write to modflow6 files.
    * Run the model.
    * Open the results back into UgridDataArrays.
    * Visualize the results.

.. GENERATED FROM PYTHON SOURCE LINES 18-20

.. code-block:: Python
   :dedent: 1










.. GENERATED FROM PYTHON SOURCE LINES 22-23

We'll start with the following imports:

.. GENERATED FROM PYTHON SOURCE LINES 23-32

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    import xarray as xr
    import xugrid as xu
    from pandas import isnull

    import imod








.. GENERATED FROM PYTHON SOURCE LINES 33-41

Create a mesh
-------------

The first steps consists of generating a mesh. In this example, we'll use data
included with iMOD Python for a circular mesh. Note that this is a `Ugrid2D
object. <https://deltares.github.io/xugrid/api/xugrid.Ugrid2d.html>`_
For more information on working with unstructured grids see the
`Xugrid documentation <https://deltares.github.io/xugrid/index.html>`_

.. GENERATED FROM PYTHON SOURCE LINES 41-47

.. code-block:: Python


    grid = imod.data.circle()

    grid






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <xarray.Dataset> Size: 10kB
    Dimensions:            (mesh2d_nFaces: 216, mesh2d_nMax_face_nodes: 3,
                            mesh2d_nEdges: 342, two: 2, mesh2d_nNodes: 127)
    Coordinates:
        mesh2d_node_x      (mesh2d_nNodes) float64 1kB 0.0 6.123e-14 ... 331.1 157.5
        mesh2d_node_y      (mesh2d_nNodes) float64 1kB 0.0 1e+03 ... 764.7 818.3
    Dimensions without coordinates: mesh2d_nFaces, mesh2d_nMax_face_nodes,
                                    mesh2d_nEdges, two, mesh2d_nNodes
    Data variables:
        mesh2d             int64 8B 0
        mesh2d_face_nodes  (mesh2d_nFaces, mesh2d_nMax_face_nodes) int32 3kB 0 ... 1
        mesh2d_edge_nodes  (mesh2d_nEdges, two) int64 5kB 0 7 0 17 ... 126 125 126
    Attributes:
        Conventions:  CF-1.9 UGRID-1.0



.. GENERATED FROM PYTHON SOURCE LINES 48-49

We can plot this object as follows:

.. GENERATED FROM PYTHON SOURCE LINES 49-54

.. code-block:: Python


    fig, ax = plt.subplots()
    xu.plot.line(grid, ax=ax)
    ax.set_aspect(1)




.. image-sg:: /examples/mf6/images/sphx_glr_circle_001.png
   :alt: circle
   :srcset: /examples/mf6/images/sphx_glr_circle_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 55-71

Create UgridDataArray
---------------------

Now that we have defined the grid, we can start defining the model parameter
data.

Our goal here is to define a steady-state model with:

* Uniform conductivities of 1.0 m/d;
* Two layers of 5.0 m thick;
* Uniform recharge of 0.001 m/d on the top layer;
* Constant heads of 1.0 m along the exterior edges of the mesh.

From these boundary conditions, we would expect circular mounding of the
groundwater; with small flows in the center and larger flows as the recharge
accumulates while the groundwater flows towards the exterior boundary.

.. GENERATED FROM PYTHON SOURCE LINES 71-89

.. code-block:: Python


    nface = grid.n_face
    nlayer = 2

    idomain = xu.UgridDataArray(
        xr.DataArray(
            np.ones((nlayer, nface), dtype=np.int32),
            coords={"layer": [1, 2]},
            dims=["layer", grid.face_dimension],
        ),
        grid=grid,
    )
    icelltype = xu.full_like(idomain, 0)
    k = xu.full_like(idomain, 1.0, dtype=float)
    k33 = k.copy()
    rch_rate = xu.full_like(idomain.sel(layer=1), 0.001, dtype=float)
    bottom = idomain * xr.DataArray([5.0, 0.0], dims=["layer"])








.. GENERATED FROM PYTHON SOURCE LINES 90-93

All the data above have been constants over the grid. For the constant head
boundary, we'd like to only set values on the external border. We can
`py:method:xugrid.UgridDataset.binary_dilation` to easily find these cells:

.. GENERATED FROM PYTHON SOURCE LINES 93-104

.. code-block:: Python


    chd_location = xu.zeros_like(idomain.sel(layer=2), dtype=bool).ugrid.binary_dilation(
        border_value=True
    )
    constant_head = xu.full_like(idomain.sel(layer=2), 1.0, dtype=float).where(chd_location)

    fig, ax = plt.subplots()
    constant_head.ugrid.plot(ax=ax)
    xu.plot.line(grid, ax=ax, color="black")
    ax.set_aspect(1)




.. image-sg:: /examples/mf6/images/sphx_glr_circle_002.png
   :alt: layer = 2
   :srcset: /examples/mf6/images/sphx_glr_circle_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 105-110

Write the model
---------------

The first step is to define an empty model, the parameters and boundary
conditions are added in the form of the familiar MODFLOW packages.

.. GENERATED FROM PYTHON SOURCE LINES 110-152

.. code-block:: Python


    gwf_model = imod.mf6.GroundwaterFlowModel()
    gwf_model["disv"] = imod.mf6.VerticesDiscretization(
        top=10.0, bottom=bottom, idomain=idomain
    )
    gwf_model["chd"] = imod.mf6.ConstantHead(
        constant_head, print_input=True, print_flows=True, save_flows=True
    )
    gwf_model["ic"] = imod.mf6.InitialConditions(start=0.0)
    gwf_model["npf"] = imod.mf6.NodePropertyFlow(
        icelltype=icelltype,
        k=k,
        k33=k33,
        save_flows=True,
    )
    gwf_model["sto"] = imod.mf6.SpecificStorage(
        specific_storage=1.0e-5,
        specific_yield=0.15,
        transient=False,
        convertible=0,
    )
    gwf_model["oc"] = imod.mf6.OutputControl(save_head="all", save_budget="all")
    gwf_model["rch"] = imod.mf6.Recharge(rch_rate)

    simulation = imod.mf6.Modflow6Simulation("circle")
    simulation["GWF_1"] = gwf_model
    simulation["solver"] = imod.mf6.Solution(
        modelnames=["GWF_1"],
        print_option="summary",
        outer_dvclose=1.0e-4,
        outer_maximum=500,
        under_relaxation=None,
        inner_dvclose=1.0e-4,
        inner_rclose=0.001,
        inner_maximum=100,
        linear_acceleration="cg",
        scaling_method=None,
        reordering_method=None,
        relaxation_factor=0.97,
    )
    simulation.create_time_discretization(additional_times=["2000-01-01", "2000-01-02"])








.. GENERATED FROM PYTHON SOURCE LINES 153-154

We'll create a new directory in which we will write and run the model.

.. GENERATED FROM PYTHON SOURCE LINES 154-158

.. code-block:: Python


    modeldir = imod.util.temporary_directory()
    simulation.write(modeldir)








.. GENERATED FROM PYTHON SOURCE LINES 159-167

Run the model
-------------

.. note::

  The following lines assume the ``mf6`` executable is available on your PATH.
  :ref:`The Modflow 6 examples introduction <mf6-introduction>` shortly
  describes how to add it to yours.

.. GENERATED FROM PYTHON SOURCE LINES 167-170

.. code-block:: Python


    simulation.run()








.. GENERATED FROM PYTHON SOURCE LINES 171-175

Open the results
----------------

First, we'll open the heads (.hds) file.

.. GENERATED FROM PYTHON SOURCE LINES 175-180

.. code-block:: Python


    head = simulation.open_head()

    head






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme="dark"],
    html[data-theme="dark"],
    body[data-theme="dark"],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1f1f1f;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 0 20px 0 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: inline-block;
      opacity: 0;
      height: 0;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:focus + label {
      border: 2px solid var(--xr-font-color0);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: "►";
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: "▼";
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: "(";
    }

    .xr-dim-list:after {
      content: ")";
    }

    .xr-dim-list li:not(:last-child):after {
      content: ",";
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-index-preview {
      grid-column: 2 / 5;
      color: var(--xr-font-color2);
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data,
    .xr-index-data-in:checked ~ .xr-index-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-index-name div,
    .xr-index-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2,
    .xr-no-icon {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;head&#x27; (time: 1, layer: 2, mesh2d_nFaces: 216)&gt; Size: 3kB
    dask.array&lt;stack, shape=(1, 2, 216), dtype=float64, chunksize=(1, 2, 216), chunktype=numpy.ndarray&gt;
    Coordinates:
      * layer          (layer) int64 16B 1 2
      * time           (time) float64 8B 1.0
      * mesh2d_nFaces  (mesh2d_nFaces) int64 2kB 0 1 2 3 4 5 ... 211 212 213 214 215</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'head'</div><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 1</li><li><span class='xr-has-index'>layer</span>: 2</li><li><span class='xr-has-index'>mesh2d_nFaces</span>: 216</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-cb4fce32-6bdb-4c3d-86e9-163d64223cb0' class='xr-array-in' type='checkbox' checked><label for='section-cb4fce32-6bdb-4c3d-86e9-163d64223cb0' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>dask.array&lt;chunksize=(1, 2, 216), meta=np.ndarray&gt;</span></div><div class='xr-array-data'><table>
        <tr>
            <td>
                <table style="border-collapse: collapse;">
                    <thead>
                        <tr>
                            <td> </td>
                            <th> Array </th>
                            <th> Chunk </th>
                        </tr>
                    </thead>
                    <tbody>
                    
                        <tr>
                            <th> Bytes </th>
                            <td> 3.38 kiB </td>
                            <td> 3.38 kiB </td>
                        </tr>
                    
                        <tr>
                            <th> Shape </th>
                            <td> (1, 2, 216) </td>
                            <td> (1, 2, 216) </td>
                        </tr>
                        <tr>
                            <th> Dask graph </th>
                            <td colspan="2"> 1 chunks in 3 graph layers </td>
                        </tr>
                        <tr>
                            <th> Data type </th>
                            <td colspan="2"> float64 numpy.ndarray </td>
                        </tr>
                    </tbody>
                </table>
            </td>
            <td>
            <svg width="194" height="90" style="stroke:rgb(0,0,0);stroke-width:1" >

      <!-- Horizontal lines -->
      <line x1="10" y1="0" x2="24" y2="14" style="stroke-width:2" />
      <line x1="10" y1="25" x2="24" y2="40" style="stroke-width:2" />

      <!-- Vertical lines -->
      <line x1="10" y1="0" x2="10" y2="25" style="stroke-width:2" />
      <line x1="24" y1="14" x2="24" y2="40" style="stroke-width:2" />

      <!-- Colored Rectangle -->
      <polygon points="10.0,0.0 24.9485979497544,14.948597949754403 24.9485979497544,40.36121446433689 10.0,25.412616514582485" style="fill:#ECB172A0;stroke-width:0"/>

      <!-- Horizontal lines -->
      <line x1="10" y1="0" x2="130" y2="0" style="stroke-width:2" />
      <line x1="24" y1="14" x2="144" y2="14" style="stroke-width:2" />

      <!-- Vertical lines -->
      <line x1="10" y1="0" x2="24" y2="14" style="stroke-width:2" />
      <line x1="130" y1="0" x2="144" y2="14" style="stroke-width:2" />

      <!-- Colored Rectangle -->
      <polygon points="10.0,0.0 130.0,0.0 144.9485979497544,14.948597949754403 24.9485979497544,14.948597949754403" style="fill:#ECB172A0;stroke-width:0"/>

      <!-- Horizontal lines -->
      <line x1="24" y1="14" x2="144" y2="14" style="stroke-width:2" />
      <line x1="24" y1="40" x2="144" y2="40" style="stroke-width:2" />

      <!-- Vertical lines -->
      <line x1="24" y1="14" x2="24" y2="40" style="stroke-width:2" />
      <line x1="144" y1="14" x2="144" y2="40" style="stroke-width:2" />

      <!-- Colored Rectangle -->
      <polygon points="24.9485979497544,14.948597949754403 144.9485979497544,14.948597949754403 144.9485979497544,40.36121446433689 24.9485979497544,40.36121446433689" style="fill:#ECB172A0;stroke-width:0"/>

      <!-- Text -->
      <text x="84.948598" y="60.361214" font-size="1.0rem" font-weight="100" text-anchor="middle" >216</text>
      <text x="164.948598" y="27.654906" font-size="1.0rem" font-weight="100" text-anchor="middle" transform="rotate(0,164.948598,27.654906)">2</text>
      <text x="7.474299" y="52.886915" font-size="1.0rem" font-weight="100" text-anchor="middle" transform="rotate(45,7.474299,52.886915)">1</text>
    </svg>
            </td>
        </tr>
    </table></div></div></li><li class='xr-section-item'><input id='section-3b02378b-dff6-4b9a-9b90-c1f5d582d591' class='xr-section-summary-in' type='checkbox'  checked><label for='section-3b02378b-dff6-4b9a-9b90-c1f5d582d591' class='xr-section-summary' >Coordinates: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>layer</span></div><div class='xr-var-dims'>(layer)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>1 2</div><input id='attrs-b3238f58-21c8-4b38-b475-cab3849d68dd' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-b3238f58-21c8-4b38-b475-cab3849d68dd' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-889804d5-fe09-46ed-b2d9-2b3cdb87b26b' class='xr-var-data-in' type='checkbox'><label for='data-889804d5-fe09-46ed-b2d9-2b3cdb87b26b' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([1, 2])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.0</div><input id='attrs-29ca73bf-8204-4249-a9b7-6b5d7aade667' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-29ca73bf-8204-4249-a9b7-6b5d7aade667' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4665da25-396e-45db-bd68-26a7c1c86861' class='xr-var-data-in' type='checkbox'><label for='data-4665da25-396e-45db-bd68-26a7c1c86861' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([1.])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>mesh2d_nFaces</span></div><div class='xr-var-dims'>(mesh2d_nFaces)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0 1 2 3 4 5 ... 211 212 213 214 215</div><input id='attrs-e693bbc5-ab02-4c28-b860-0cd4b91376f2' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e693bbc5-ab02-4c28-b860-0cd4b91376f2' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-129516c4-ad9b-459a-ad59-e716a89080fe' class='xr-var-data-in' type='checkbox'><label for='data-129516c4-ad9b-459a-ad59-e716a89080fe' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([  0,   1,   2, ..., 213, 214, 215], shape=(216,))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-086ce92b-cac2-4417-97e2-90dd6a757b10' class='xr-section-summary-in' type='checkbox'  ><label for='section-086ce92b-cac2-4417-97e2-90dd6a757b10' class='xr-section-summary' >Indexes: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>layer</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-ede0b13b-61cb-49f2-9047-ebe810ed939b' class='xr-index-data-in' type='checkbox'/><label for='index-ede0b13b-61cb-49f2-9047-ebe810ed939b' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([1, 2], dtype=&#x27;int64&#x27;, name=&#x27;layer&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>time</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-6314d1b9-656c-49c2-be23-79f9c0e36461' class='xr-index-data-in' type='checkbox'/><label for='index-6314d1b9-656c-49c2-be23-79f9c0e36461' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([1.0], dtype=&#x27;float64&#x27;, name=&#x27;time&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>mesh2d_nFaces</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-37afad2d-6dc2-4665-b29d-47d64e3f39be' class='xr-index-data-in' type='checkbox'/><label for='index-37afad2d-6dc2-4665-b29d-47d64e3f39be' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(RangeIndex(start=0, stop=216, step=1, name=&#x27;mesh2d_nFaces&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-5c6c49f7-3c12-4b31-b538-64365d25509c' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-5c6c49f7-3c12-4b31-b538-64365d25509c' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 181-186

For a DISV MODFLOW6 model, the heads are returned as a UgridDataArray.  While
all layers and timesteps are available, they are only loaded into memory as
needed.

We may also open the cell-by-cell flows (.cbc) file.

.. GENERATED FROM PYTHON SOURCE LINES 186-191

.. code-block:: Python


    cbc = simulation.open_flow_budget()

    print(cbc.keys())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    KeysView(<xarray.Dataset> Size: 28kB
    Dimensions:                 (layer: 2, time: 1, mesh2d_nEdges: 342,
                                 mesh2d_nFaces: 216)
    Coordinates:
      * layer                   (layer) int64 16B 1 2
      * time                    (time) float64 8B 1.0
      * mesh2d_nFaces           (mesh2d_nFaces) int64 2kB 0 1 2 3 ... 213 214 215
      * mesh2d_nEdges           (mesh2d_nEdges) int64 3kB 0 1 2 3 ... 339 340 341
    Data variables:
        flow-horizontal-face    (time, layer, mesh2d_nEdges) float64 5kB dask.array<chunksize=(1, 2, 342), meta=np.ndarray>
        flow-horizontal-face-x  (time, layer, mesh2d_nEdges) float64 5kB dask.array<chunksize=(1, 2, 342), meta=np.ndarray>
        flow-horizontal-face-y  (time, layer, mesh2d_nEdges) float64 5kB dask.array<chunksize=(1, 2, 342), meta=np.ndarray>
        flow-lower-face         (time, layer, mesh2d_nFaces) float64 3kB dask.array<chunksize=(1, 2, 216), meta=np.ndarray>
        chd_chd                 (time, layer, mesh2d_nFaces) float64 3kB dask.array<chunksize=(1, 2, 216), meta=np.ndarray>)




.. GENERATED FROM PYTHON SOURCE LINES 192-201

The flows are returned as a dictionary of UgridDataArrays. This dictionary
contains all entries that are stored in the CBC file, but like for the heads
file the data are only loaded into memory when needed.

The horizontal flows are stored on the edges of the UgridDataArray topology.
The other flows are generally stored on the faces; this includes the
flow-lower-face.

We'll create a dataset for the horizontal flows for further analysis.

.. GENERATED FROM PYTHON SOURCE LINES 201-207

.. code-block:: Python


    cbc_grid = cbc["flow-horizontal-face-x"].grid
    ds = xu.UgridDataset(grids=cbc_grid)
    ds["u"] = cbc["flow-horizontal-face-x"]
    ds["v"] = cbc["flow-horizontal-face-y"]








.. GENERATED FROM PYTHON SOURCE LINES 208-214

Visualize the results
---------------------

We can quickly and easily visualize the output with the plotting functions
provided by xarray and xugrid. We'll add some some edge coordinates to the
dataset so that they can be used to place the arrows in the quiver plot.

.. GENERATED FROM PYTHON SOURCE LINES 214-223

.. code-block:: Python


    ds = ds.ugrid.assign_edge_coords()
    fig, ax = plt.subplots()
    head.isel(time=0, layer=0).compute().ugrid.plot(ax=ax)
    ds.isel(time=0, layer=0).plot.quiver(
        x="mesh2d_edge_x", y="mesh2d_edge_y", u="u", v="v", color="white"
    )
    ax.set_aspect(1)




.. image-sg:: /examples/mf6/images/sphx_glr_circle_003.png
   :alt: layer = 1, time = 1.0
   :srcset: /examples/mf6/images/sphx_glr_circle_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 224-226

As would be expected from our model input, we observe circular groundwater
mounding and increasing flows as we move from the center to the exterior.

.. GENERATED FROM PYTHON SOURCE LINES 228-235

Slice the model domain
----------------------

We may also quickly setup a smaller model. We'll select half of the original
domain. To set up the boundary conditions on the clipped edges you can provide
a states_for_boundary dictionary. In this case we add the head values of the
computed full domain simulation as the clipped boundary values.

.. GENERATED FROM PYTHON SOURCE LINES 235-244

.. code-block:: Python


    states_for_boundary = {
        "GWF_1": head.compute(),
    }

    half_simulation = simulation.clip_box(
        x_max=0.0, states_for_boundary=states_for_boundary
    )








.. GENERATED FROM PYTHON SOURCE LINES 245-246

Let's run the model, read the results, and visualize.

.. GENERATED FROM PYTHON SOURCE LINES 246-252

.. code-block:: Python


    modeldir = imod.util.temporary_directory()
    half_simulation.write(modeldir)
    half_simulation.run()
    head = half_simulation.open_head()








.. GENERATED FROM PYTHON SOURCE LINES 253-254

Let's add constant head boundaries together and plot them.

.. GENERATED FROM PYTHON SOURCE LINES 254-270

.. code-block:: Python


    half_simulation_constant_head = half_simulation["GWF_1"]["chd"]["head"]

    clipped_half_simulation_constant_head = (
        half_simulation["GWF_1"]["chd_clipped"]["head"].sel(layer=2).isel(time=0)
    )

    all_boundaries_constant_head = half_simulation_constant_head.where(
        ~isnull(half_simulation_constant_head), clipped_half_simulation_constant_head
    )

    # plot boundary conditions
    fig, ax = plt.subplots()
    all_boundaries_constant_head.ugrid.plot(ax=ax)
    ax.set_aspect(1)




.. image-sg:: /examples/mf6/images/sphx_glr_circle_004.png
   :alt: layer = 2, time = 1.0
   :srcset: /examples/mf6/images/sphx_glr_circle_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 271-272

plot computed heads

.. GENERATED FROM PYTHON SOURCE LINES 272-275

.. code-block:: Python

    fig, ax = plt.subplots()
    head.isel(time=0, layer=0).compute().ugrid.plot(ax=ax)
    ax.set_aspect(1)



.. image-sg:: /examples/mf6/images/sphx_glr_circle_005.png
   :alt: layer = 1, time = 1.0
   :srcset: /examples/mf6/images/sphx_glr_circle_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.949 seconds)


.. _sphx_glr_download_examples_mf6_circle.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: circle.ipynb <circle.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: circle.py <circle.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: circle.zip <circle.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
