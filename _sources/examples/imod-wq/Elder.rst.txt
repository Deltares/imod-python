
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\imod-wq\Elder.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_imod-wq_Elder.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_imod-wq_Elder.py:


Elder
=====

The classic 2D Elder problem demonstrates free convection.
Traditionally this was created for heat transport, but we use
a modified version for salt transport.
The conceptual model can be seen as a 2D sand box,
with on top a salt lake in the center and fresh lakes
on both the outer edges of the top row.

More info about the theory behind the Elder problem:

Simpson, J., & Clement, P. (2003).
Theoretical analysis of the worthiness of Henry and Elder
problems as benchmark of density-dependent groundwater flow models.
`Advances in Water Resources, 1708` (02).
Retrieved from http://www.eng.auburn.edu/~clemept/publsihed_pdf/awrmat.pdf

.. GENERATED FROM PYTHON SOURCE LINES 22-23

We'll start with the usual imports

.. GENERATED FROM PYTHON SOURCE LINES 23-30

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    import xarray as xr

    import imod








.. GENERATED FROM PYTHON SOURCE LINES 31-37

Discretization
--------------

We'll start off by creating a model discretization, since
this is a simple conceptual model.
The model is a 2D cross-section, hence ``nrow = 1``.

.. GENERATED FROM PYTHON SOURCE LINES 37-46

.. code-block:: Python


    nrow = 1
    ncol = 160
    nlay = 82

    dz = 1.875
    dx = 3.75
    dy = -dx








.. GENERATED FROM PYTHON SOURCE LINES 47-48

setup tops and bottoms

.. GENERATED FROM PYTHON SOURCE LINES 48-56

.. code-block:: Python

    top1D = xr.DataArray(
        np.arange(nlay * dz, 0.0, -dz), {"layer": np.arange(1, nlay + 1)}, ("layer")
    )

    bot = top1D - dz
    top = nlay * dz









.. GENERATED FROM PYTHON SOURCE LINES 57-58

Set up ibound, which sets where active cells are `(ibound = 1.0)`

.. GENERATED FROM PYTHON SOURCE LINES 58-73

.. code-block:: Python

    bnd = xr.DataArray(
        data=np.full((nlay, nrow, ncol), 1.0),
        coords={
            "y": [0.5],
            "x": np.arange(0.5 * dx, dx * ncol, dx),
            "layer": np.arange(1, 1 + nlay),
            "dx": dx,
            "dy": dy,
        },
        dims=("layer", "y", "x"),
    )

    fig, ax = plt.subplots()
    bnd.plot(y="layer", yincrease=False, ax=ax)




.. image-sg:: /examples/imod-wq/images/sphx_glr_Elder_001.png
   :alt: y = 0.5, dx = 3.75, dy = -3.75
   :srcset: /examples/imod-wq/images/sphx_glr_Elder_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.QuadMesh object at 0x000001A34AFCA910>



.. GENERATED FROM PYTHON SOURCE LINES 74-79

Boundary Conditions
-------------------

Set the constant heads by specifying a negative value in iboud,
that is: ``bnd[index] = -1```

.. GENERATED FROM PYTHON SOURCE LINES 79-88

.. code-block:: Python


    bnd[0, :, 0:40] = 0
    bnd[0, :, 121:160] = 0
    bnd[1, :, 0] = -1
    bnd[1, :, 159] = -1

    fig, ax = plt.subplots()
    bnd.plot(y="layer", yincrease=False, ax=ax)




.. image-sg:: /examples/imod-wq/images/sphx_glr_Elder_002.png
   :alt: y = 0.5, dx = 3.75, dy = -3.75
   :srcset: /examples/imod-wq/images/sphx_glr_Elder_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.QuadMesh object at 0x000001A350AB21D0>



.. GENERATED FROM PYTHON SOURCE LINES 89-91

Define the icbund, which sets which cells
in the solute transport model are active, inactive or constant.

.. GENERATED FROM PYTHON SOURCE LINES 91-107

.. code-block:: Python

    icbund = xr.DataArray(
        data=np.full((nlay, nrow, ncol), 1.0),
        coords={
            "y": [0.5],
            "x": np.arange(0.5 * dx, dx * ncol, dx),
            "layer": np.arange(1, nlay + 1),
        },
        dims=("layer", "y", "x"),
    )

    icbund[81, :, :] = -1
    icbund[0, :, 41:120] = -1

    fig, ax = plt.subplots()
    icbund.plot(y="layer", yincrease=False, ax=ax)




.. image-sg:: /examples/imod-wq/images/sphx_glr_Elder_003.png
   :alt: y = 0.5
   :srcset: /examples/imod-wq/images/sphx_glr_Elder_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.QuadMesh object at 0x000001A34E442990>



.. GENERATED FROM PYTHON SOURCE LINES 108-112

Initial Conditions
------------------

Define the starting concentration

.. GENERATED FROM PYTHON SOURCE LINES 112-129

.. code-block:: Python


    sconc = xr.DataArray(
        data=np.full((nlay, nrow, ncol), 0.0),
        coords={
            "y": [0.5],
            "x": np.arange(0.5 * dx, dx * ncol, dx),
            "layer": np.arange(1, nlay + 1),
        },
        dims=("layer", "y", "x"),
    )

    sconc[81, :, :] = 0
    sconc[0, :, 41:120] = 280.0

    fig, ax = plt.subplots()
    sconc.plot(y="layer", yincrease=False, ax=ax)




.. image-sg:: /examples/imod-wq/images/sphx_glr_Elder_004.png
   :alt: y = 0.5
   :srcset: /examples/imod-wq/images/sphx_glr_Elder_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.QuadMesh object at 0x000001A3457D5C90>



.. GENERATED FROM PYTHON SOURCE LINES 130-134

Build
-----

Finally, we build the model.

.. GENERATED FROM PYTHON SOURCE LINES 134-160

.. code-block:: Python


    m = imod.wq.SeawatModel("Elder")
    m["bas"] = imod.wq.BasicFlow(ibound=bnd, top=top, bottom=bot, starting_head=0.0)
    m["lpf"] = imod.wq.LayerPropertyFlow(
        k_horizontal=0.411, k_vertical=0.411, specific_storage=0.0
    )
    m["btn"] = imod.wq.BasicTransport(
        icbund=icbund, starting_concentration=sconc, porosity=0.1
    )
    m["adv"] = imod.wq.AdvectionTVD(courant=1.0)
    m["dsp"] = imod.wq.Dispersion(longitudinal=0.0, diffusion_coefficient=0.308)
    m["vdf"] = imod.wq.VariableDensityFlow(density_concentration_slope=0.71)
    m["wel"] = imod.wq.Well(id_name="wel", x=0.5 * dx, y=0.5, rate=0.28512)
    m["pcg"] = imod.wq.PreconditionedConjugateGradientSolver(
        max_iter=150, inner_iter=30, hclose=0.0001, rclose=0.1, relax=0.98, damp=1.0
    )
    m["gcg"] = imod.wq.GeneralizedConjugateGradientSolver(
        max_iter=150,
        inner_iter=30,
        cclose=1.0e-6,
        preconditioner="mic",
        lump_dispersion=True,
    )
    m["oc"] = imod.wq.OutputControl(save_head_idf=True, save_concentration_idf=True)
    m.create_time_discretization(additional_times=["2000-01-01T00:00", "2020-01-01T00:00"])








.. GENERATED FROM PYTHON SOURCE LINES 161-162

Now we write the model

.. GENERATED FROM PYTHON SOURCE LINES 162-166

.. code-block:: Python


    modeldir = imod.util.temporary_directory()
    m.write(modeldir, resultdir_is_workdir=True)








.. GENERATED FROM PYTHON SOURCE LINES 167-185

Run
---

You can run the model using the comand prompt and the iMOD-WQ executable.
This is part of the iMOD v5 release, which can be downloaded here:
https://oss.deltares.nl/web/imod/download-imod5 .
This only works on Windows.

To run your model, open up a command prompt
and run the following commands:

.. code-block:: batch

   cd c:\path\to\modeldir
   c:\path\to\imod\folder\iMOD-WQ_V5_3_SVN359_X64R.exe Elder.run

Note that the version name of your executable might differ.


.. GENERATED FROM PYTHON SOURCE LINES 187-205

Visualise results
-----------------

After succesfully running the model, you can
plot results as follows:

.. code:: python

   head = imod.idf.open(modeldir / "results/head/*.idf")

   fig, ax = plt.subplots()
   head.plot(yincrease=False, ax=ax)

   conc = imod.idf.open(modeldir / "results/conc/*.idf")

   fig, ax = plt.subplots()
   conc.plot(levels=range(0, 35, 5), yincrease=False, ax=ax)



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.391 seconds)


.. _sphx_glr_download_examples_imod-wq_Elder.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: Elder.ipynb <Elder.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: Elder.py <Elder.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: Elder.zip <Elder.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
