
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user-guide\03-timeseries-data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_user-guide_03-timeseries-data.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user-guide_03-timeseries-data.py:


Time series data and Pandas
===========================

Handling time series is major part of geohydrology and groundwater modeling.
Time series data come in more than one form:

* Time series linked to a point location, for example a measured groundwater
  level at a specific location.
* Time series of a spatially continuous nature, for example model output of
  calculated head for a specific model layer.

We typically represent time series data at points as a
:py:class:`pandas.DataFrame`, despite the (apparent) match with GeoDataFrames.
The issue is that a GeoDataFrame has to store the geometry for every row: this
means many duplicated geometries. Fortunately, pandas' `group by`_
(split-apply-combine) functionality provides a (fairly) convenient way of
working with time series data of many points.

Pandas provides many tools for working with time series data, such as:

* Input and output to many tabular formats, such as CSV or Excel;
* Data selection;
* Filling or interpolating missing data;
* Resampling to specific frequencies;
* Plotting.

Timeseries at point locations
-----------------------------

iMOD represents time series at points in an IPF format. This format stores
its data as:

* A "mother" file containing the x and y coordinates of the point. Each
  point can be associated with a timeseries with a label.
* A timeries file for every point.

These files can be read via :func:`imod.formats.ipf.read`. The ``read`` function
will read the mother file, and follow its labels, reading every associated
timeseries file as well. Finally, these are merged into a single large table;
the properties of the point (e.g. the x,y coordinates) are duplicated for every
row.

.. note::

    This may seem wasteful, but:

    * There are few data structures available for storing point data with
      associated time series. For example: xarray can store the point location
      as coordinates, but every point will need to share its time axis -- the
      same time window for every point and the same time resolution.
    * There are equally few file formats suitable for this data. A single large
      table is supported by many file formats.
    * Pandas `group by`_ functionality is quite fast.

.. _group by: https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html
.. _narrow: https://en.wikipedia.org/wiki/Wide_and_narrow_data

.. GENERATED FROM PYTHON SOURCE LINES 63-69

Example: Head observations
--------------------------

Let's load some example data. We'll load some head observations. This is a
large dataset, originally stored in the IPF format. This dataset has a similar
form to what :func:`imod.formats.ipf.read` would return.

.. GENERATED FROM PYTHON SOURCE LINES 69-75

.. code-block:: Python


    import imod

    heads = imod.data.head_observations()
    heads






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Unnamed: 0</th>
          <th>id</th>
          <th>Filternummer</th>
          <th>time</th>
          <th>head</th>
          <th>filt_top</th>
          <th>filt_bot</th>
          <th>Meetpunt tov m NAP</th>
          <th>x</th>
          <th>y</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>B12A1745001</td>
          <td>1</td>
          <td>2007-12-28</td>
          <td>NaN</td>
          <td>9.29</td>
          <td>8.29</td>
          <td>9.86</td>
          <td>226410</td>
          <td>563800</td>
        </tr>
        <tr>
          <th>1</th>
          <td>2</td>
          <td>B12A1745001</td>
          <td>1</td>
          <td>2008-01-28</td>
          <td>9.03</td>
          <td>9.29</td>
          <td>8.29</td>
          <td>9.86</td>
          <td>226410</td>
          <td>563800</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3</td>
          <td>B12A1745001</td>
          <td>1</td>
          <td>2008-02-14</td>
          <td>8.70</td>
          <td>9.29</td>
          <td>8.29</td>
          <td>9.86</td>
          <td>226410</td>
          <td>563800</td>
        </tr>
        <tr>
          <th>3</th>
          <td>4</td>
          <td>B12A1745001</td>
          <td>1</td>
          <td>2008-02-28</td>
          <td>8.53</td>
          <td>9.29</td>
          <td>8.29</td>
          <td>9.86</td>
          <td>226410</td>
          <td>563800</td>
        </tr>
        <tr>
          <th>4</th>
          <td>5</td>
          <td>B12A1745001</td>
          <td>1</td>
          <td>2008-03-17</td>
          <td>8.63</td>
          <td>9.29</td>
          <td>8.29</td>
          <td>9.86</td>
          <td>226410</td>
          <td>563800</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>60374</th>
          <td>92</td>
          <td>B17E2244001</td>
          <td>1</td>
          <td>2019-05-14</td>
          <td>15.44</td>
          <td>8.64</td>
          <td>7.64</td>
          <td>16.08</td>
          <td>240586</td>
          <td>543605</td>
        </tr>
        <tr>
          <th>60375</th>
          <td>93</td>
          <td>B17E2244001</td>
          <td>1</td>
          <td>2019-05-28</td>
          <td>15.28</td>
          <td>8.64</td>
          <td>7.64</td>
          <td>16.08</td>
          <td>240586</td>
          <td>543605</td>
        </tr>
        <tr>
          <th>60376</th>
          <td>94</td>
          <td>B17E2244001</td>
          <td>1</td>
          <td>2019-06-14</td>
          <td>15.13</td>
          <td>8.64</td>
          <td>7.64</td>
          <td>16.08</td>
          <td>240586</td>
          <td>543605</td>
        </tr>
        <tr>
          <th>60377</th>
          <td>95</td>
          <td>B17E2244001</td>
          <td>1</td>
          <td>2019-06-28</td>
          <td>14.88</td>
          <td>8.64</td>
          <td>7.64</td>
          <td>16.08</td>
          <td>240586</td>
          <td>543605</td>
        </tr>
        <tr>
          <th>60378</th>
          <td>98</td>
          <td>B17E2244001</td>
          <td>1</td>
          <td>2019-08-14</td>
          <td>14.53</td>
          <td>8.64</td>
          <td>7.64</td>
          <td>16.08</td>
          <td>240586</td>
          <td>543605</td>
        </tr>
      </tbody>
    </table>
    <p>60379 rows Ã— 10 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 76-81

We can see that the data is stored in a long format, with duplicate entries
for each time. Let's do some selections to showcase some functionality of
pandas. Let's first compute filter depth, which is the difference between the
surface_elevation and the top of the filter. Note: "Meetpunt tov m NAP" =
surface elevation, "filt_top" = top of the filter.

.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: Python


    filter_depth = heads["Meetpunt tov m NAP"] - heads["filt_top"]
    filter_depth





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0        0.57
    1        0.57
    2        0.57
    3        0.57
    4        0.57
             ... 
    60374    7.44
    60375    7.44
    60376    7.44
    60377    7.44
    60378    7.44
    Length: 60379, dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 87-89

The original dataset is very large, so let's limit ourselves to only head
observations close to surface elevation. Let's say the first 20 cm below surface.

.. GENERATED FROM PYTHON SOURCE LINES 90-94

.. code-block:: Python


    heads_shallow = heads.loc[filter_depth < 0.2]
    heads_shallow = heads_shallow.sort_values(by="time")








.. GENERATED FROM PYTHON SOURCE LINES 95-97

Let's plot the head observations for these shallow observations over time with
a separate line for each filter.

.. GENERATED FROM PYTHON SOURCE LINES 98-105

.. code-block:: Python


    import matplotlib.pyplot as plt

    fig, ax = plt.subplots()
    for key, group in heads_shallow.groupby("id"):
        ax = group.plot(x="time", y="head", ax=ax, label=key)




.. image-sg:: /user-guide/images/sphx_glr_03-timeseries-data_001.png
   :alt: 03 timeseries data
   :srcset: /user-guide/images/sphx_glr_03-timeseries-data_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 106-109

It seems one line disappeared. Let's count the number of observations per
filter. We can see that one of the filters has only one observation, making it
hard to draw a line.

.. GENERATED FROM PYTHON SOURCE LINES 110-113

.. code-block:: Python


    heads_shallow.groupby("id")["head"].count()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    id
    B12A1792001     72
    B12A1898001      1
    B12D1846001    113
    B17B0271002    124
    Name: head, dtype: int64



.. GENERATED FROM PYTHON SOURCE LINES 114-116

Let's check whether these head observations were all measured at the same
date. We can groupby time and count the number of observations per time.

.. GENERATED FROM PYTHON SOURCE LINES 117-121

.. code-block:: Python


    n_obs_per_time = heads_shallow.groupby("time")["id"].count()
    n_obs_per_time





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    time
    2001-07-16    1
    2001-08-14    1
    2001-09-14    1
    2001-09-28    1
    2001-10-14    1
                 ..
    2018-11-14    1
    2018-12-13    1
    2019-05-14    1
    2019-08-28    1
    2019-08-30    1
    Name: id, Length: 297, dtype: int64



.. GENERATED FROM PYTHON SOURCE LINES 122-127

We can see in the printed summary that most dates have only one observation,
and that the last two dates are only two days apart. This is likely caused by
observations on inconsistent dates.

Let's see if there are some dates with more than one observation.

.. GENERATED FROM PYTHON SOURCE LINES 128-131

.. code-block:: Python


    n_obs_per_time.unique()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([1, 2])



.. GENERATED FROM PYTHON SOURCE LINES 132-134

We can see that there are some dates with two observations. Lets's
see which dates those are:

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: Python


    n_obs_per_time.loc[n_obs_per_time == 2]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    time
    2004-08-14    2
    2004-10-14    2
    2005-04-14    2
    2005-04-28    2
    2005-05-14    2
    2005-10-28    2
    2007-10-14    2
    2008-12-14    2
    2009-01-14    2
    2009-01-28    2
    2009-08-28    2
    2009-09-14    2
    2009-09-28    2
    2014-09-29    2
    2014-10-14    2
    Name: id, dtype: int64



.. GENERATED FROM PYTHON SOURCE LINES 139-148

MODFLOW 6
---------

iMOD Python's :class:`imod.mf6.Well` and :class:`imod.mf6.LayeredWell` classes
require their data to be provided as points. However, these require the rates
to be provided on consistent timesteps amongst all points. This means that the
data has to be resampled to a consistent frequency. This is done for the user
when calling :meth:`imod.mf6.Well.from_imod5_data` or
:meth:`imod.mf6.LayeredWell.from_imod5_data`.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.107 seconds)


.. _sphx_glr_download_user-guide_03-timeseries-data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 03-timeseries-data.ipynb <03-timeseries-data.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 03-timeseries-data.py <03-timeseries-data.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 03-timeseries-data.zip <03-timeseries-data.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
