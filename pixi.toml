[project]
name = "imod-python"
version = "0.17.1"
description = "Make massive MODFLOW models"
authors = ["Deltares <huite.bootsma@deltares.nl>", ]
channels = ["conda-forge", ]
platforms = ["win-64", "linux-64", "osx-arm64"]
license = "MIT"
license-file = "LICENSE"
readme = "README.rst"
homepage = "https://github.com/Deltares/imod-python"
documentation = "https://deltares.github.io/imod-python/"
repository = "https://github.com/Deltares/imod-python.git"

[tasks]
docs =  { cmd = "make html", depends_on = ["install"], cwd = "docs" }
install = "python -m pip install --no-deps --editable ."
install_with_deps = "python -m pip install --editable ."
format = "ruff check --fix .; ruff format ."
lint = "ruff check . ; ruff format --check ."
tests = { depends_on = ["unittests", "examples"] }
unittests = { depends_on = ["unittests_njit", "unittests_jit"] }
unittests_njit = { cmd = [
    "NUMBA_DISABLE_JIT=1",
    "pytest",
    "-n", "auto",
    "-m", "not example and not user_acceptance and not unittest_jit",
    "--cache-clear",
    "--verbose",
    "--junitxml=unittest_report.xml",
    "--cov=imod",
    "--cov-report=term",
    "--cov-report=html:coverage",
    "--cov-config=.coveragerc"
], depends_on = ["install"], cwd = "imod/tests" }
unittests_jit = { cmd = [
    "pytest",
    "-n", "auto",
    "-m", "unittest_jit",
    "--cache-clear",
    "--verbose",
    "--junitxml=unittest_jit_report.xml",
], depends_on = ["install"], cwd = "imod/tests" }
examples = { cmd = [
    "NUMBA_DISABLE_JIT=1",
    "pytest",
    "-n", "auto",
    "-m", "example",
    "--cache-clear",
    "--verbose",
    "--junitxml=examples_report.xml",
], depends_on = ["install"], cwd = "imod/tests", env = { IMOD_DATA_DIR = ".imod_data" } }
# User acceptance tests, only works when paths to models are located on local
# drive and are specified in a .env file.
user_acceptance = { cmd = [
    "pytest",
    "-m", "user_acceptance",
    "--cache-clear",
    "--verbose",
    "--junitxml=user_acceptance_report.xml",
], depends_on = ["install"], cwd = "imod/tests", env = { IMOD_DATA_DIR = ".imod_data" } }
test_import = { cmd = [
    "python",
    "-c",
    "import imod"
], depends_on = ["install_with_deps"]}
pypi-publish = { cmd = "rm --recursive --force dist && python -m build && twine check dist/* && twine upload dist/*" }

mypy_lint = { cmd ="mypy", depends_on = ["install"]}
mypy_report = { cmd ="mypy | mypy2junit > mypy-report.xml", depends_on = ["install"]}

[dependencies]
affine = "*"
black = "*"
bottleneck = "*"
cftime = ">=1"
contextily = ">=1"
cytoolz = "*"
dask = "*"
fastcore = "*"
filelock = "*"
flopy = "*"
geopandas = "*"
gdal = ">=3.9.2"
gh = "*"
graphviz = "*"
hatchling = "*"
hypothesis = "*"
jinja2 = "*"
loguru = "*"
matplotlib = "*"
mypy = "*"
netcdf4 = "*"
numba = ">=0.50"
numba_celltree = "<0.2" # The 0.2 version breaks the following test: test_in_bounds, test_get_indices__unstructured, test_get_values__unstructured
numpy = "*"
pandamesh = "*"
pandas = "*"
pip = "*"
pooch = "*"
pydantic = "*"
pydata-sphinx-theme = "*"
pymetis = "*"
pyproj = "*"
pytest = "<8"   # Newer version incompatible with pytest-cases
pytest-benchmark = "*"
pytest-cases = "*"
pytest-cov = "*"
pytest-dotenv = "*"
pytest-xdist = "*"
python = "3.11.*"
python-graphviz = "*"
pyvista = "*"
rasterio = ">=1.0"
rioxarray = "*"
ruff = "*"
scipy = "*"
scooby = "*"
setuptools_scm = "*"
shapely = ">=2.0"
sphinx = "5"
sphinx-gallery = "*"
tomli = ">=1.1.0"
tomli-w = "*"
toolz = "*"
tqdm = "*"
twine = "*"
vtk = { version = ">=9.0", build = "*qt*", channel = "conda-forge" }
xarray = ">=2023.08.0"
xugrid = ">=0.11.0"
zarr = "*"
python-build = "*"

[pypi-dependencies]
mypy2junit = "*"

[feature.interactive.dependencies]
ipykernel = "*"
ipython = "*"
jupyter = "*"

[feature.py310.dependencies]
python = "3.10.12"
pip = "*"

[feature.py311.dependencies]
python = "3.11"
pip = "*"

[feature.py312.dependencies]
python = "3.12"
pip = "*"

[feature.py_common.tasks]
test_import = { cmd = [
    "python",
    "-c",
    "import imod"
], depends_on = ["install_with_deps"]}
install_with_deps = "python -m pip install --editable ."

[environments]
default = {features = [], solve-group = "conda-deps"}
interactive = {features = ["interactive"], solve-group = "conda-deps"}
py310 = {features = ["py310", "py_common"], no-default-feature = true}
py311 = {features = ["py311", "py_common"], no-default-feature = true}
py312 = {features = ["py312", "py_common"], no-default-feature = true}