[project]
name = "imod-python"
version = "1.0.0rc4"
description = "Make massive MODFLOW models"
authors = ["Deltares <imod.info@deltares.nl>"]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-arm64", "osx-64"]
license = "MIT"
license-file = "LICENSE"
readme = "README.rst"
homepage = "https://github.com/Deltares/imod-python"
documentation = "https://deltares.github.io/imod-python/"
repository = "https://github.com/Deltares/imod-python.git"

[tasks]
# General tasks
docs = { cmd = "make html", depends-on = ["install"], cwd = "docs" }
install = "python -m pip install --no-deps --editable ."
pypi-publish = { cmd = "rm --recursive --force dist && python -m build && twine check dist/* && twine upload dist/*" }

# Lint and format tasks
format = "ruff check --fix .; ruff format ."
lint = "ruff check . ; ruff format --check ."
mypy_lint = { cmd = "mypy", depends-on = ["install"] }
mypy_report = { cmd = "mypy | mypy2junit > mypy-report.xml", depends-on = [
    "install",
] }

# Tests tasks
tests = { depends-on = ["unittests", "examples"] }
unittests = { depends-on = ["unittests_njit", "unittests_jit"] }
unittests_njit = { cmd = [
    "NUMBA_DISABLE_JIT=1",
    "pytest",
    "-n",
    "auto",
    "-m",
    "not example and not user_acceptance and not unittest_jit and not qgis_export",
    "--cache-clear",
    "--verbose",
    "--junitxml=unittest_report.xml",
    "--cov=imod",
    "--cov-report=term",
    "--cov-report=html:coverage",
    "--cov-config=.coveragerc",
], depends-on = [
    "install",
], cwd = "imod/tests" }
unittests_jit = { cmd = [
    "pytest",
    "-n",
    "auto",
    "-m",
    "unittest_jit",
    "--cache-clear",
    "--verbose",
    "--junitxml=unittest_jit_report.xml",
], depends-on = [
    "install",
], cwd = "imod/tests" }
# User acceptance tests, only works when paths to models are located on local
# drive and are specified in a .env file.
user_acceptance = { cmd = [
    "pytest",
    "-m",
    "user_acceptance",
    "--cache-clear",
    "--verbose",
    "--junitxml=user_acceptance_report.xml",
], depends-on = [
    "install",
], cwd = "imod/tests", env = { IMOD_DATA_DIR = ".imod_data" } }
examples = { cmd = [
    "pytest",
    "-n",
    "auto",
    "-m",
    "example",
    "--cache-clear",
    "--verbose",
    "--junitxml=examples_report.xml",
], depends-on = [
    "install",
], cwd = "imod/tests", env = { IMOD_DATA_DIR = ".imod_data" } }
qgis_export = { cmd = [
    "pytest",
    "-s",
    "-m",
    "qgis_export",
    "--cache-clear",
    "--verbose",
    "--junitxml=qgis_export_report.xml",
], depends-on = [
    "install",
], cwd = "imod/tests", env = { IMOD_DATA_DIR = ".imod_data" } }

[dependencies]
affine = "*"
black = "*"
bottleneck = "*"
cftime = ">=1"
contextily = ">=1"
cytoolz = "*"
dask = "*"
filelock = "*"
flopy = "*"
gdal = ">=3.9.2"
geopandas = "*"
gh = "*"
graphviz = "*"
hatchling = "*"
hypothesis = "*"
jinja2 = "*"
libgdal-hdf5 = "*"
loguru = "*"
matplotlib = "*"
mypy = "*"
netcdf4 = "*"
numba = ">=0.50"
numpy = "*"
pandamesh = "*"
pandas = "*"
pip = "*"
plum-dispatch = "*"
pooch = "*"
pydantic = "*"
pydata-sphinx-theme = "*"
pymetis = "*"
pyproj = "*"
pytest = "*"
pytest-benchmark = "*"
pytest-cases = ">=3.9.1"
pytest-cov = "*"
pytest-dotenv = "*"
pytest-xdist = "*"
python = "3.12.*"
python-build = "*"
python-graphviz = "*"
pyvista = "*"
rasterio = "*"
rioxarray = "*"
ruff = "*"
scipy = "*"
scooby = "*"
setuptools_scm = "*"
shapely = ">=2.0"
sphinx = "*"
sphinx-gallery = "*"
tomli = ">=1.1.0"
tomli-w = "*"
toolz = "*"
tqdm = "*"
twine = "*"
vtk = { version = ">=9.0", build = "*qt*" }
xarray = "!=2025.04.0"                      # Issue with xarray 2025.04.0 and rendering HFBs
xugrid = ">=0.14.0"
zarr = "*"
pytest-timeout = ">=2.3.1,<3"

[pypi-dependencies]
mypy2junit = "*"
flopy4 = { git = "https://github.com/modflowpy/pyphoenix-project.git", branch = "develop" }

[feature.interactive.dependencies]
ipykernel = "*"
ipython = "*"
jupyter = "*"

[feature.pixi-update.dependencies]
pip = "*"
pixi-diff-to-markdown = "*"

[feature.py311.dependencies]
python = "3.11.*"
pip = "*"

[feature.py312.dependencies]
python = "3.12.*"
pip = "*"

[feature.py313.dependencies]
python = "3.13.*"
pip = "*"

[feature.pixi-update.tasks]
update = "pixi update --json | pixi-diff-to-markdown > diff.md"

[feature.py_common.tasks]
test_import = { cmd = [
    "python",
    "-c",
    "import imod",
], depends-on = [
    "install_with_deps",
] }
install_with_deps = "python -m pip install --editable ."

[environments]
default = { features = [], solve-group = "conda-deps" }
interactive = { features = ["interactive"], solve-group = "conda-deps" }
py311 = { features = ["py311", "py_common"], no-default-feature = true }
py312 = { features = ["py312", "py_common"], no-default-feature = true }
py313 = { features = ["py313", "py_common"], no-default-feature = true }
pixi-update = { features = ["pixi-update"], no-default-feature = true }
