# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/stable/config

# -- Path setup --------------------------------------------------------------

import os
import subprocess
from importlib.metadata import distribution

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
from sphinx_gallery.sorting import FileNameSortKey

# -- Project information -----------------------------------------------------

project = "iMOD Python"
copyright = "Deltares"
author = "iMOD development team"

# The full version, including alpha/beta/rc tags
release = distribution("imod").version
# The short version which is displayed
version = ".".join(release.split(".")[:3]) + ".dev"


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.viewcode",
    "sphinx.ext.todo",
    "sphinx.ext.napoleon",
    "sphinx_gallery.gen_gallery",
]

templates_path = ["_templates"]

sphinx_gallery_conf = {
    "examples_dirs": [
        "../examples/user-guide",
        # "../examples/data",
        "../examples/mf6",
        "../examples/imod-wq",
        "../examples/imodflow",
        "../examples/metaswap",
        "../examples/prepare",
        "../examples/visualize",
    ],  # path to your example scripts
    "gallery_dirs": [
        "user-guide",
        # "examples/data",
        "examples/mf6",
        "examples/imod-wq",
        "examples/imodflow",
        "examples/metaswap",
        "examples/prepare",
        "examples/visualize",
    ],  # path to where to save gallery generated output
    "filename_pattern": ".py",
    "ignore_pattern": ".pytmp",
    "abort_on_example_error": True,
    "capture_repr": ("_repr_html_", "__repr__"),
    "remove_config_comments": True,  # remove sphinx config comments from the rendered example
    "within_subsection_order": FileNameSortKey,
}

# Add any paths that contain templates here, relative to this directory.
# templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ["_build", "_templates", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "pydata_sphinx_theme"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]
html_js_files = ["deltares.js"]

# Set
html_context = {"default_mode": "light"}

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
version_or_name = subprocess.run(
    "git symbolic-ref -q --short HEAD || git describe --tags --exact-match",
    capture_output=True,
    shell=True,
    text=True,
).stdout.strip()

env = os.environ
json_url = (
    "https://deltares.github.io/imod-python/_static/switcher.json"
    if "JSON_URL" not in env
    else env["JSON_URL"]
)

html_theme_options = {
    "navbar_align": "content",
    "icon_links": [
        {
            "name": "Deltares",
            "url": "https://www.deltares.nl/en/",
            "icon": "fa-custom fa-deltares",
            "type": "fontawesome",
        },
        {
            "name": "GitHub",
            "url": "https://github.com/Deltares/imod-python",
            "icon": "fab fa-github",
            "type": "fontawesome",
        },
    ],
    "logo": {
        "image_light": "imod-python-logo-light.svg",
        "image_dark": "imod-python-logo-dark.svg",
    },
    "switcher": {
        "json_url": json_url,
        "version_match": version_or_name,
    },
    "navbar_end": ["theme-switcher", "navbar-icon-links", "version-switcher"],
    "show_version_warning_banner": True,
    "check_switcher": False,
}

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "imoddoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [(master_doc, "imod.tex", "imod Documentation", "Author", "manual")]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "imod", "imod Documentation", [author], 1)]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "imod",
        "imod Documentation",
        author,
        "imod",
        "One line description of project.",
        "Miscellaneous",
    )
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]


# -- Extension configuration -------------------------------------------------

# extension sphinx.ext.todo
# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True
